Import C libraries here

Import function prototypes here

// Main
int main(int argc, char **argv, char **envp) {
    // if only 1 argument go to interactive mode
    if(argc == 1) {
        interactive_mode();
    }
    // if only 2 argument go to batch mode
    if(argc == 2) {
        batch_mode();
    }
    // if greater then 3 there are too many
    if(argc >= 3) {
        perror("Too many Arguments");
        exit(0);
    }
}

// Function to execute shell in batch (file) mode
batch_mode() {
    print the shell prompt string
    while(lines in file) {
        call line parser
    }
    if(EOF reached) {
        exit(0);
    }
}

// Function to execute shell in interactive mode
interactive() {
    print the shell prompt string
    call lineparser()
    
    free tokens
    free line
}

// Function to parse a given line and proceed with flag-based execution
lineparse() {
    set up an array of integers to initalize flags
    
    while(1) {
        print the shell prompt string
        parse through the user given line
        read using getline()
            add NULL '\n' token at the end of user line
            tokenize using whitespace and other delimters as main tokens
            
        convert it to array of strings
        call strcmp and see if it's a builtin or special characters
            '|', '&', '>', '>>', '<'
            // If pipe is present, you don't have to do redirection and vice versa.
            // '&' always has to work
            If '&' flag is raised, when exec is called refer to & flag to wait for process to execute in background
            If it is a builtin
                run command handler
            If a pipe flag was raised
                run pipe() function
            If a redirection flag was raised
                run redirect() function
            else
                runs exec exec(function) below if not a built-in
        use flags to detect if built-in commands are present
        make execution decision about state
    }
}

// Function to exec if a fork is detected in previous flag
pipe() {
    initalize pid fork
    if pid is less then zero
        print error
    if pid == 0 then it's a child process
        execv the first argument and entire list of argument string
    else then it's a parent process
        if you need to wait
            then wait for the given pid to finish
        else
            set wait flag to 0
        
    redirect stdin using dup2
    redirect stdin using dup2
}

// Function to execute redirection
redirect() {
    open the file of where output will go
        file_descriptor = open(filename)
    overwrite the index of the file output using dup2
        dup2(new_file_descript, old_file_descript);
}

// Function to execute process
void exec(char **args, &flag present)
    declare child_pid to equal a fork()
    
    if the child_pid is zero (aka it's a child process) {
        execute a process using the first argument and args
        declare a perror incase the execution fails
        exit(1) aka failure
    }
    else if (the child_pid is greater than 0 then it's a parent process) {
        declare a status integer and 
        if the & flag is true then execute the wait process to run process in background
        do this action {
            waitpid for the child process to execute then change the statusid
        } while we wait for the status to change
    }
    else {
        declare a perror incase all else fails
    }
}

// Function to execute builtin commands
int commandHandler(char** parsedStrings) {
    declare # of built in commands present in shell
    declare a char array of list of own commands
    declare a char array for username
    
    initalize each built in command like so
    ListOfBuiltInCommands[0] = "help";
    ListOfBuiltInCommands[1] = "cd";
    ListOfBuiltInCommands[n] = "...";
    
    // make a for loop that determines which command the user wants
    for(int i=0; i< # of commands; i++) {
        if(the first parsed string and the specific list of built of commands is equal) {
            then increment the counter for later switch cases use
        }
    }
    
    // HAVE A CASE PRESENT FOR EACH BUILT IN COMMANDS THAT RELATES TO THE ARRAY ABOVE
    switch(counter from above) {
        case 1 to n:
            printf("Executing command");
        default:
            break;
    }
    return 0;
}

// Function to execute built-in command exit
void exit(char **args) {
    exit(0) function was a success
}

// Function to execute built-in command quit
void quit(char **args) {
    exit(0) function was a success
}

// Function to execute built-in command cd
void cd(char **args) {
    if(no directory was given in args[1]) {
        report current working directory
    }
    else {
        if(user input is a full filepath) {
            then use ENTIRE FUNCTION FROM TULS.C
        }
        if(change if the 2nd argument of chdir isn't 0 then we don't have a directory to switch to) {
            print out an error 
        }
        if(chdir was successful) {
            alter PWD environment variable
        }
    }
}

// Function to execute built-in command dir
void dir(char **args) {
    if(no directory was given in args[1]) {
        print error for invalid arguments
    }
    else /* directory was provided*/ {
        then use ENTIRE FUNCTION FROM TULS.C to print out all directory contents
    }
}

// Function to execute built-in command help
void help(char **args) {
    declare char *help to display all text
        include the name of the shell and all the possible arguments the user can use
    printf the char *help to the screen
}

// Function to execute built-in command clr
void clr(char **args) {
    printf("\e[1;1H\e[2J");
}

// Function to execute built-in command environ
void environ(char **args) {
    for loop through all possible environment variables in evp pointers (given in main)
        if a evp pointer with a value exist then print it
}

// Function to execute built-in command echo
void echo(char **args) {
    for loop that loops through all given arguments in current use
        print argv[i] as we go along
        followed by a new line
}

// Function to execute built-in command pause
void pause(char **args) {
    // pauses screen until any char is present on keyboard
    getch();
}

// Function to execute built-in command path
void path(char **args) {
    if(user path given is empty) {
        the shell will not run any programs
    }
    else {
        using given arguments, reassign current shell path to new argument path
    }
}

TEST PLAN
In terms of a test plan, I want to slowly implement each section of this shell piece by piece
rather then implementing a batch of functions and then debugging for weeks on end. In the context
of specific test cases, I want to include cases like a background process in a strange place like
cmd1 | cmd2 | cmd3 & or cmd1 & cmd2 & and see what output my shell will produce. Some other test cases
may also be cases that have intentional mistakes in them like cmd1 | > cmd2 (this case can't exist because
given the case that piping and redirection can't exist in the same test case, thankfully phew!). Additionally,
all built in commands will be easy to test given the less variablty of what the user can input (besides cd and dir
but those two commands have already been extensively coded in previous assignments so it shouldn't be too hard).
